import { Injectable } from '@nestjs/common';
import OpenAI from 'openai';
import { OPENAI_API_KEY } from 'src/config/env.loader';

@Injectable()
export class IaService {
  private openai: OpenAI;

  constructor() {
    this.openai = new OpenAI({
      apiKey: OPENAI_API_KEY,
    });
  }

  async extractIntents(userMessage: string): Promise<string[]> {
    const prompt = `Est√°s actuando como un analizador de intenciones para un chatbot gastron√≥mico. Tu tarea es extraer palabras clave o intenciones relacionadas con comida, salud, dieta, ingredientes o preferencias del usuario a partir de su mensaje.

Ten√©s que devolver una lista en formato JSON con conceptos clave detectados. Detect√° la intenci√≥n incluso si el usuario usa:

- Lenguaje informal o coloquial
- Errores de escritura menores
- Idiomas mixtos (ej: 'sugar free', 'sin az√∫car')
- Expresiones equivalentes o sin√≥nimos

üìå Ejemplos de equivalencias esperadas:

- "sin az√∫car", "sugar free", "bajo en az√∫car", "no az√∫car" ‚Üí "sin az√∫car"
- "sin gluten", "gluten free", "cel√≠aco", "libre de gluten" ‚Üí "sin gluten"
- "vegano", "vegan", "sin productos animales" ‚Üí "vegano"
- "vegetariano", "vegetarian", "no carne" ‚Üí "vegetariano"
- "sin lactosa", "lactose free", "intolerancia a la lactosa" ‚Üí "sin lactosa"
- "saludable", "light", "fitness", "comida sana" ‚Üí "saludable"
- "keto", "cetog√©nico", "pocos carbohidratos" ‚Üí "keto"
- "proteico", "con prote√≠nas", "alto en prote√≠nas" ‚Üí "proteico"

üì§ Si no detect√°s ninguna intenci√≥n relacionada con preferencias alimenticias, ingredientes o dieta, devolv√© un array vac√≠o: []

üßæ Mensaje del usuario:
"${userMessage}"

Respond√© solo con el array en formato JSON, sin explicaciones ni texto adicional.
    `;

    try {
      const completion = await this.openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'user', content: prompt }],
      });

      const raw = completion.choices[0].message.content || '[]';
      const parsed = JSON.parse(raw);
      console.log('üß† Intents detectados:', parsed);

      return parsed;
    } catch (error: any) {
      console.error('‚ùå Error en extractIntents:', error);

      if (error.code === 'insufficient_quota') {
        const fallback = ['üß† El sistema est√° temporalmente fuera de servicio por l√≠mite de uso. Intent√° m√°s tarde.'];
        console.log('‚ö†Ô∏è Intents fallback por l√≠mite:', fallback);
        return fallback;
      }

      const fallback = ['‚ùå Error al generar intents.'];
      console.log('‚ö†Ô∏è Intents fallback general:', fallback);
      return fallback;
    }
  }

  async matchWithAI(userMessage: string, allDetails: { product: string; detail: string }[]): Promise<{ product: string; detail: string }[]> {
    const prompt = `
Tengo los siguientes detalles de productos:

${JSON.stringify(
  allDetails.map((d, i) => ({ id: i, ...d })),
  null,
  2,
)}

Y este mensaje del usuario:

"${userMessage}"

Decime los IDs de los detalles que est√°n relacionados con la intenci√≥n del usuario. Si el mensaje no tiene relaci√≥n con comida, dieta o ingredientes, devolv√© []. Respond√© solo con un array de IDs.
`;

    try {
      console.log('üì§ Enviando prompt a OpenAI...');
      const completion = await this.openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'user', content: prompt }],
      });

      const content = completion.choices[0].message.content || '[]';
      console.log('üß† Respuesta cruda de OpenAI:', content);

      const matchedIds: number[] = JSON.parse(content);
      console.log('üéØ IDs detectados por OpenAI:', matchedIds);

      const result = matchedIds.map((id) => allDetails[id]).filter(Boolean);
      console.log('‚úÖ Detalles encontrados:', result);

      return result;
    } catch (error) {
      console.error('‚ùå Error en matchWithAI:', error);
      return [];
    }
  }
}
